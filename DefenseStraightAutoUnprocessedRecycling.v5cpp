{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor leftMotorA = motor(PORT2, ratio18_1, false);\nmotor leftMotorB = motor(PORT11, ratio18_1, false);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT19, ratio18_1, true);\nmotor rightMotorB = motor(PORT9, ratio18_1, true);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 40, mm, 1);\n\nmotor IntakeMotorA = motor(PORT1, ratio6_1, false);\nmotor IntakeMotorB = motor(PORT10, ratio6_1, true);\nmotor_group Intake = motor_group(IntakeMotorA, IntakeMotorB);\n\nmotor LauncherMotorA = motor(PORT13, ratio36_1, false);\nmotor LauncherMotorB = motor(PORT14, ratio36_1, true);\nmotor_group Launcher = motor_group(LauncherMotorA, LauncherMotorB);\n\n\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis1\n      // right = Axis3 - Axis1\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis1.position();\n      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis1.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// Make sure all required headers are included.\n#include \"vex.h\"\n#include <string>\n  \nusing namespace vex;\n\n// Code by Hamza\n// Last edit Dec 14\n// MIT licensed\n\n\n// ======================\n// Fix them turns (mostly)\n// ======================\n\nint turnAmount(int wanted) {\n  switch (wanted) {\n    case 45:\n      return 110;\n    case 90:\n      return 220;\n    case 180:\n      return 440;\n    default:\n      return 880;\n  }\n}\n\n\n// ======================\n// Launcher and intake\n// ======================\n\nint initLauncher() {\n  bool Controller1UpDownButtonsControlMotorsStopped = true;\n  bool Controller1ForwardBackButtonsControlMotorsStopped = true;\n  while (true) {\n      // Turn launcher motor\n      if (Controller1.ButtonY.pressing()) {\n        Launcher.spin(forward);\n        Controller1UpDownButtonsControlMotorsStopped = false;\n      } else if (Controller1.ButtonA.pressing()) {\n        Launcher.spin(reverse);\n        Controller1UpDownButtonsControlMotorsStopped = false;\n      } else if (!Controller1UpDownButtonsControlMotorsStopped) {\n        Launcher.stop();\n        Controller1UpDownButtonsControlMotorsStopped = true;\n      }\n\n      // Turn intake motor\n      if (Controller1.ButtonR2.pressing()) {\n        Intake.spin(forward);\n        Controller1ForwardBackButtonsControlMotorsStopped = false;\n      } else if (Controller1.ButtonR1.pressing()) {\n        Intake.spin(reverse);\n        Controller1ForwardBackButtonsControlMotorsStopped = false;\n      } else if (!Controller1ForwardBackButtonsControlMotorsStopped) {\n        Intake.stop();\n        Controller1ForwardBackButtonsControlMotorsStopped = true;\n      }\n  }\n  wait(20, msec);\n}\n\n\n// ======================\n// Comp and auto code\n// ======================\n\ncompetition Competition = competition();\n\n// Function to run when the \"autonomous\" signal is received\nvoid runOnAutonomous() {\n  Brain.Screen.print(\"Running autonomous...\");\n  Brain.Screen.newLine();\n\n  // For rubber band\n  Drivetrain.setDriveVelocity(70, percent);\n  Drivetrain.setTurnVelocity(50, percent);\n  Drivetrain.driveFor(forward, 40, inches);\n  Drivetrain.turnFor(left, 120, degrees);\n  Drivetrain.driveFor(forward, 10, inches);\n  Drivetrain.driveFor(reverse, 10, inches);\n\n  Brain.Screen.print(\"Finished running autonomous\");\n  Brain.Screen.newLine();\n}\n\n// Function to run when the \"driver control\" signal is received\nvoid runOnDriverControl() {\n  Brain.Screen.print(\"Running driver control\");\n  Brain.Screen.newLine();\n}\n\n\n// ======================\n// Start function\n// ======================\n\nint main() {\n  // Just printing\n  Brain.Screen.print(\"program started\");\n  Brain.Screen.newLine();\n\n  // Checks for comp switch\n  if (Competition.isCompetitionSwitch()) {\n    Brain.Screen.print(\"comp switch connected\");\n    Brain.Screen.newLine();\n  }\n\n  // Decides what auto code to run\n  Competition.autonomous(runOnAutonomous);\n  Competition.drivercontrol(runOnDriverControl);\n\n  // Increase speed for intake\n  Intake.setVelocity(50, percent);\n  // Set max torque for launcher\n  Launcher.setMaxTorque(100, percent);\n\n  // Start launcher loop\n  initLauncher();\n}\n","textLanguage":"cpp","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22},{"port":[2,11,19,9,null],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180","id":"partner"},"triportSourcePort":null},{"port":[1,10],"name":"Intake","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio6_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[13,14],"name":"Launcher","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio36_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.5","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}